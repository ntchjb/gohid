// Code generated by MockGen. DO NOT EDIT.
// Source: ./manager/manager.go
//
// Generated by this command:
//
//	mockgen -source=./manager/manager.go -destination=./manager/mock_manager.go -package=manager
//

// Package manager is a generated GoMock package.
package manager

import (
	reflect "reflect"

	gousb "github.com/google/gousb"
	hid "github.com/ntchjb/gohid/hid"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceManager is a mock of DeviceManager interface.
type MockDeviceManager struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceManagerMockRecorder
}

// MockDeviceManagerMockRecorder is the mock recorder for MockDeviceManager.
type MockDeviceManagerMockRecorder struct {
	mock *MockDeviceManager
}

// NewMockDeviceManager creates a new mock instance.
func NewMockDeviceManager(ctrl *gomock.Controller) *MockDeviceManager {
	mock := &MockDeviceManager{ctrl: ctrl}
	mock.recorder = &MockDeviceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceManager) EXPECT() *MockDeviceManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDeviceManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDeviceManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDeviceManager)(nil).Close))
}

// Enumerate mocks base method.
func (m *MockDeviceManager) Enumerate(vendorID, productID gousb.ID) (hid.DeviceInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enumerate", vendorID, productID)
	ret0, _ := ret[0].(hid.DeviceInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enumerate indicates an expected call of Enumerate.
func (mr *MockDeviceManagerMockRecorder) Enumerate(vendorID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enumerate", reflect.TypeOf((*MockDeviceManager)(nil).Enumerate), vendorID, productID)
}

// Open mocks base method.
func (m *MockDeviceManager) Open(vendorID, productID gousb.ID, config hid.DeviceConfig) (hid.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", vendorID, productID, config)
	ret0, _ := ret[0].(hid.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockDeviceManagerMockRecorder) Open(vendorID, productID, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDeviceManager)(nil).Open), vendorID, productID, config)
}
