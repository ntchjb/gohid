// Code generated by MockGen. DO NOT EDIT.
// Source: ./hid/device.go
//
// Generated by this command:
//
//	mockgen -source=./hid/device.go -destination=./hid/mock_device.go -package=hid
//

// Package hid is a generated GoMock package.
package hid

import (
	context "context"
	reflect "reflect"

	hid "github.com/ntchjb/usbip-virtual-device/usb/protocol/hid"
	report "github.com/ntchjb/usbip-virtual-device/usb/protocol/hid/report"
	gomock "go.uber.org/mock/gomock"
)

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDevice) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDeviceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDevice)(nil).Close))
}

// GetDeviceInfo mocks base method.
func (m *MockDevice) GetDeviceInfo() DeviceInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceInfo")
	ret0, _ := ret[0].(DeviceInfo)
	return ret0
}

// GetDeviceInfo indicates an expected call of GetDeviceInfo.
func (mr *MockDeviceMockRecorder) GetDeviceInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceInfo", reflect.TypeOf((*MockDevice)(nil).GetDeviceInfo))
}

// GetFeatureReport mocks base method.
func (m *MockDevice) GetFeatureReport(data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureReport", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureReport indicates an expected call of GetFeatureReport.
func (mr *MockDeviceMockRecorder) GetFeatureReport(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureReport", reflect.TypeOf((*MockDevice)(nil).GetFeatureReport), data)
}

// GetHIDDescriptor mocks base method.
func (m *MockDevice) GetHIDDescriptor() (hid.HIDDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHIDDescriptor")
	ret0, _ := ret[0].(hid.HIDDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHIDDescriptor indicates an expected call of GetHIDDescriptor.
func (mr *MockDeviceMockRecorder) GetHIDDescriptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHIDDescriptor", reflect.TypeOf((*MockDevice)(nil).GetHIDDescriptor))
}

// GetInputReport mocks base method.
func (m *MockDevice) GetInputReport(data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInputReport", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInputReport indicates an expected call of GetInputReport.
func (mr *MockDeviceMockRecorder) GetInputReport(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInputReport", reflect.TypeOf((*MockDevice)(nil).GetInputReport), data)
}

// GetManufacturer mocks base method.
func (m *MockDevice) GetManufacturer() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManufacturer")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManufacturer indicates an expected call of GetManufacturer.
func (mr *MockDeviceMockRecorder) GetManufacturer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManufacturer", reflect.TypeOf((*MockDevice)(nil).GetManufacturer))
}

// GetProduct mocks base method.
func (m *MockDevice) GetProduct() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockDeviceMockRecorder) GetProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockDevice)(nil).GetProduct))
}

// GetReportDescriptor mocks base method.
func (m *MockDevice) GetReportDescriptor() (report.HIDReportDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportDescriptor")
	ret0, _ := ret[0].(report.HIDReportDescriptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportDescriptor indicates an expected call of GetReportDescriptor.
func (mr *MockDeviceMockRecorder) GetReportDescriptor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportDescriptor", reflect.TypeOf((*MockDevice)(nil).GetReportDescriptor))
}

// GetSerialNumber mocks base method.
func (m *MockDevice) GetSerialNumber() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSerialNumber")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSerialNumber indicates an expected call of GetSerialNumber.
func (mr *MockDeviceMockRecorder) GetSerialNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerialNumber", reflect.TypeOf((*MockDevice)(nil).GetSerialNumber))
}

// GetStringDescriptor mocks base method.
func (m *MockDevice) GetStringDescriptor(index int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringDescriptor", index)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStringDescriptor indicates an expected call of GetStringDescriptor.
func (mr *MockDeviceMockRecorder) GetStringDescriptor(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringDescriptor", reflect.TypeOf((*MockDevice)(nil).GetStringDescriptor), index)
}

// ReadInput mocks base method.
func (m *MockDevice) ReadInput(ctx context.Context, data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInput", ctx, data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInput indicates an expected call of ReadInput.
func (mr *MockDeviceMockRecorder) ReadInput(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInput", reflect.TypeOf((*MockDevice)(nil).ReadInput), ctx, data)
}

// SendFeatureReport mocks base method.
func (m *MockDevice) SendFeatureReport(data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFeatureReport", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendFeatureReport indicates an expected call of SendFeatureReport.
func (mr *MockDeviceMockRecorder) SendFeatureReport(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFeatureReport", reflect.TypeOf((*MockDevice)(nil).SendFeatureReport), data)
}

// SendOutputReport mocks base method.
func (m *MockDevice) SendOutputReport(data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOutputReport", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOutputReport indicates an expected call of SendOutputReport.
func (mr *MockDeviceMockRecorder) SendOutputReport(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOutputReport", reflect.TypeOf((*MockDevice)(nil).SendOutputReport), data)
}

// SetTarget mocks base method.
func (m *MockDevice) SetTarget(confNumber, infNumber, altNumber int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTarget", confNumber, infNumber, altNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTarget indicates an expected call of SetTarget.
func (mr *MockDeviceMockRecorder) SetTarget(confNumber, infNumber, altNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTarget", reflect.TypeOf((*MockDevice)(nil).SetTarget), confNumber, infNumber, altNumber)
}

// WriteOutput mocks base method.
func (m *MockDevice) WriteOutput(ctx context.Context, data []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOutput", ctx, data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteOutput indicates an expected call of WriteOutput.
func (mr *MockDeviceMockRecorder) WriteOutput(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOutput", reflect.TypeOf((*MockDevice)(nil).WriteOutput), ctx, data)
}
